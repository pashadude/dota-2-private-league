{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"start",
				"start_time"
			],
			[
				"getMa",
				"getMatchInfo"
			],
			[
				"f",
				"foreach	foreach …"
			],
			[
				"getL",
				"getLeagueMatchez"
			],
			[
				"for",
				"for	for …"
			],
			[
				"pl",
				"players_info"
			],
			[
				"getM",
				"getMatchPlayers"
			],
			[
				"dotas",
				"dotasname"
			],
			[
				"fo",
				"for	for …"
			],
			[
				"dota",
				"dota_id"
			],
			[
				"player",
				"player_info"
			],
			[
				"id",
				"id_dota"
			],
			[
				"S",
				"SteamCondenser"
			],
			[
				"req",
				"require_once"
			],
			[
				"A",
				"AddAddress"
			],
			[
				"pq",
				"pqnext"
			],
			[
				"da",
				"data"
			],
			[
				"U",
				"Unauthorized"
			],
			[
				"Req",
				"Request"
			],
			[
				"match",
				"match_types"
			],
			[
				"po",
				"possibleDetailsValues"
			],
			[
				"in",
				"in_array"
			],
			[
				"i",
				"if	if …"
			],
			[
				"requiredDa",
				"requiredDetailsFields"
			],
			[
				"Parser",
				"ParserInterface"
			],
			[
				"def",
				"defaultParameters"
			],
			[
				"array_merge",
				"array_merge_recursive"
			],
			[
				"user",
				"useragent"
			],
			[
				"curl_setopt",
				"curl_setopt_array"
			],
			[
				"geta",
				"getagent"
			],
			[
				"lobbie",
				"lobbies"
			],
			[
				"setMatch",
				"setMatchData"
			],
			[
				"ex",
				"exit"
			],
			[
				"print",
				"print_r"
			],
			[
				"is_s",
				"is_string"
			],
			[
				"isa",
				"is_array"
			],
			[
				"pla",
				"PlayerToMachine"
			],
			[
				"key",
				"key_value"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "<?php\n\nrequire_once ('config.php');\nrequire_once ('vendor/koraktor/steam-condenser/lib/steam-condenser.php');\n\nfunction steamid2dotaid($playname){\n	try\n	{\n	    $id = SteamId::create($playname);\n	} \n	\n	catch (SteamCondenserException $s)\n	{\n	    echo \"steam name does not exist!\";\n	}\n\n	$id_dota = $id->getSteamId64();\n	return $id_dota;\n}\n\n\nfunction dotasname($dota_id) {\n\n	$players_mapper_web = new players_mapper_web();\n	$players_info = $players_mapper_web->add_id($dota_id)->load();\n	foreach($players_info as $player_info) {\n	    $name = $player_info->get('personaname');\n	}\n	return $name;\n\n}\n\nfunction countDotaStatsByMatches ($dota_id){\n	$matches_mapper_web = new matches_mapper_web();\n	$matches_mapper_web->set_account_id($dota_id);\n	$matches_short_info = $matches_mapper_web->load();\n	if (empty( $matches_short_info ) ) {  \n	echo \"the user has not shared matches\";\n	} else {\n		$results = array();\n		$k = 1;\n		$results['gold_per_min'] = 0;\n		$results['xp_per_min'] = 0;\n		foreach ($matches_short_info AS $key=>$match_short_info) {\n		    $match_mapper = new match_mapper_web($key);\n		    $match = $match_mapper->load();\n		    $slots = $match->get_all_slots();\n		    	foreach ($slots as $slot) {\n		    		$steam_id = (player::convert_id($slot->get('account_id')));\n		    		if ($steam_id == $dota_id) {\n		    			$results['kills'] += $slot->get('kills');\n		    			$results['deaths'] += $slot->get('deaths');\n		    			$results['assists'] += $slot->get('assists');\n		    			//echo $slot->get('gold_per_min').\"-gold\".$slot->get('xp_per_min').\"-exp\";\n		    			$results['gold_per_min'] = ($results['gold_per_min']*($k-1) + $slot->get('gold_per_min'))/$k;\n		    			$results['xp_per_min'] = ($results['xp_per_min']*($k-1) + $slot->get('xp_per_min'))/$k;\n						if ($match->get('radiant_win')) {\n							if ($slot->get('player_slot')<128) {\n								$results['wins']+=1;\n							} else {\n								$results['losses']+=1;\n							}\n						} else {\n							if ($slot->get('player_slot')<128) {\n								$results['losses']+=1;\n							} else {\n								$results['wins']+=1;\n							}\n						}\n		    		}\n		    	}\n		    $k++;\n		}\n		return $results;\n	}\n}\n\n\n\nfunction getMatchInfo ($match_id){\n	$results = array();\n	if (isset($_GET['match_id'])) {\n	    $match_id = intval($_GET['match_id']);\n	}\n	$match_mapper_web = new match_mapper_web($match_id);\n	$match = $match_mapper_web->load();\n	if (is_null($match)) {\n	    die('<p>Match does not exists.</p>');\n	}\n\n	//print_r ($match);\n\n	$results['starttime'] = $match->get('start_time');\n	for ($i=0; $i < 5; $i++) { \n		$slot = $match->get_slot($i);\n		$id = player::convert_id($slot->get('account_id'));\n		//print_r ($id);\n		\n		if($id != player::ANONYMOUS) {\n			$results['player'][$i]['name'] = dotasname($id);\n		} else {\n			$results['player'][$i]['name'] = 'anonymous player';\n		}\n\n		$j = $i + 128;\n		$k = $i + 5;\n\n		$slot = $match->get_slot($j);\n		$id = player::convert_id($slot->get('account_id'));\n		//print_r ($id);\n		\n		if($id != player::ANONYMOUS) {\n			//echo $id.\" \";\n			$results['player'][$k]['name'] = dotasname($id);\n		} else {\n			$results['player'][$k]['name'] = 'anonymous player';\n		}\n	}\n	return $results;	\n}\n\n\nfunction getMatchTeamPlayers ($slots, $players, $teamname){\n	for ($i=0; $i < 5; $i++) { \n		$steam_id = player::convert_id($slots[$teamname][$i]->get('account_id'));		\n		if($steam_id != player::ANONYMOUS) {\n	        $name = $players[$steam_id]->get('personaname');\n	    } else {\n	    	$name = \"anonymous player\";\n	    }\n	    $team[$i] = $name;\n	}\n	return $team;\n}\n\nfunction getLeaguesId($name) {\n	$leagues_mapper_web = new leagues_mapper_web();\n	$leagues = $leagues_mapper_web->load();\n	foreach($leagues as $league) {\n	    if ( $league->get('name') == $name) {\n	    	return $league->get('leagueid');\n	    }\n	}\n}\n\nfunction getLeagueMatchez($id){\n	$league_mapper = new league_mapper($id);\n	$games = $league_mapper->load();\n	$matches_mapper_web = new matches_mapper_web();\n	$matches_mapper_web->set_league_id($id)\n	//return $games;\n	$last_match_id = null;\n	$all_are_loaded = false;\n\n	\n\n\n}\n\nfunction getMatchResults ($match_id){\n	if (isset($_GET['match_id'])) {\n	    $match_id = intval($_GET['match_id']);\n	}\n	$match_mapper_web = new match_mapper_web($match_id);\n	$match = $match_mapper_web->load();\n	if (is_null($match)) {\n	    die('<p>Match does not exists.</p>');\n	}\n	$players_mapper_web = new players_mapper_web();\n	foreach($match->get_all_slots() as $slot) {\n	    if ($slot->get('account_id') != player::ANONYMOUS) {\n	        $players_mapper_web->add_id(player::convert_id($slot->get('account_id')));\n	    }\n	}\n	\n	$players = $players_mapper_web->load();\n	$slots = $match->get_all_slots_divided();\n	$results = array ();\n\n    if($match->get('radiant_win')){\n		$results['winners'] = getMatchTeamPlayers ($slots, $players, 'radiant');\n		$results['losers'] = getMatchTeamPlayers ($slots, $players, 'dire');\n	} else {\n		$results['winners'] = getMatchTeamPlayers ($slots, $players, 'dire');\n		$results['losers'] = getMatchTeamPlayers ($slots, $players, 'radiant');\n	}\n	\n	return $results;\n}\n\n\n//convertor\n//echo dotasname(steamid2dotaid('Power_Never'));\n\n\n\n\n//match results\n//print_r (getMatchResults(37626434));\n\n//dot alias\n//echo dotasname(steamid2dotaid('pashadudue'));\n//dotasname(76561198067910001);\n\n//statistics by player\n//print_r (countDotaStatsByMatches(steamid2dotaid('Power_Never')));\n\n\n//print_r (countDotaStatsByMatches(steamid2dotaid(76561198073529900)));\n//echo dotasname(steamid2dotaid(76561198073529900));\n\n//match data neededto check if it is the match we are looking for\n//print_r(getMatchInfo(37626434));\n\n\n//league id by name\n//echo getLeaguesId(\"ProveYourSkillz Tier 1: South America\");\n\n//all_league life matchez\n//print_r (getLeagueMatchez(1791));\n\n\n//getAllLeagueMatches(1791);\n\n\n//matchez of certain league, certain date, certain users\n\n\n\n\n\n\n?>",
			"file": "index.php",
			"file_size": 5797,
			"file_write_time": 130582713673743463,
			"settings":
			{
				"buffer_size": 5800,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 54.0,
		"selected_items":
		[
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"package control",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/proveyourskillz/.config/sublime-text-3/Packages/Xdebug Client/Xdebug.sublime-settings",
		"/var/www/dota2_pl/dota2_pl.sublime-project",
		"/var/www/PHPMailer-master/index.php",
		"/home/proveyourskillz/repos/parsing/lol_combined.php",
		"/home/proveyourskillz/repos/parsing/getplayerstats.php",
		"/var/www/dota2_pl/index.php",
		"/home/proveyourskillz/Desktop/PHPMailer-master/index.php",
		"/home/proveyourskillz/Desktop/dota2 letter.html",
		"/home/proveyourskillz/Desktop/index.php",
		"/home/proveyourskillz/Downloads/index (5).php",
		"/home/proveyourskillz/xboxgamertag.com-parser/samples/leaderbord.html",
		"/home/proveyourskillz/Desktop/letter.html",
		"/home/proveyourskillz/Desktop/pml-task/project.html",
		"/home/proveyourskillz/Downloads/pdudko-parsing-41c0c77968bc/lol_legendsnet.php",
		"/home/proveyourskillz/Downloads/Space Battleship Yamato_2010/Space Battleship Yamato_2010.srt",
		"/home/proveyourskillz/Downloads/invites.json",
		"/home/proveyourskillz/xboxgamertag.com-parser/leaderboard.php",
		"/home/proveyourskillz/xboxgamertag.com-parser/gamertag_fetcher.php",
		"/home/proveyourskillz/Downloads/pdudko-parsing-41c0c77968bc/fifa_new_parsa.php",
		"/home/proveyourskillz/Downloads/pdudko-parsing-41c0c77968bc/lol_all.php",
		"/home/proveyourskillz/Downloads/pdudko-parsing-41c0c77968bc/lol_combined.php",
		"/var/www/xboxgamertag.com-parser/gamertag_parse.php",
		"/home/proveyourskillz/Desktop/phpQuery-onefile.php",
		"/home/proveyourskillz/index.php",
		"/home/proveyourskillz/Downloads/prediction_io_severalgames",
		"/home/proveyourskillz/Downloads/Models.php"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"dota",
			"retu",
			"french",
			"str",
			"php",
			"file",
			"curl_ex",
			"data",
			"$data",
			"curler",
			"Curler",
			"curler",
			"this",
			"time",
			"usera",
			"curl_set",
			"str",
			"agent"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5800,
						"regions":
						{
						},
						"selection":
						[
							[
								110,
								110
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/PHP/PHP.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				2,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.680636237898,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.xdebug":
	{
		"height": 0.0
	},
	"project": "dota2_pl.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"xdebug":
		{
			"hide_conflict": false,
			"restore_index":
			{
				"17":
				{
					"group": 0,
					"index": 0
				}
			},
			"restore_layout":
			{
				"cells":
				[
					[
						0,
						0,
						2,
						1
					],
					[
						0,
						1,
						1,
						2
					],
					[
						1,
						1,
						2,
						2
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					0.690318118949,
					1.0
				]
			}
		}
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 242.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
